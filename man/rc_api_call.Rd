% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rc_api_call.R
\name{rc_api_call}
\alias{rc_api_call}
\title{Execute a call to the REDCap API}
\usage{
rc_api_call(
  url = getOption("redcap_bundle")$redcap_url,
  token = getOption("redcap_token"),
  content = "version",
  action = "export",
  return_as = "dataframe",
  ...,
  arms = NULL,
  fields = NULL,
  forms = NULL,
  events = NULL,
  records = NULL,
  dags = NULL,
  beginTime = "",
  csvDelimiter = "",
  dag = "",
  data = NULL,
  dateRangeBegin = "",
  dateRangeEnd = "",
  endTime = "",
  event = "",
  exportCheckboxLabel = "false",
  exportDataAccessGroups = "false",
  exportSurveyFields = "false",
  file_field = "",
  file = "path/to/file",
  filterLogic = "",
  forceAutoNumber = "false",
  logtype = "",
  overWriteBehavior = "normal",
  rawOrLabel = "raw",
  rawOrLabelHeaders = "raw",
  record = "",
  report_id = "",
  returnContent = "count",
  returnMetadataOnly = "false",
  type = "flat",
  user = "",
  format = "csv",
  returnFormat = "csv",
  encode = "form"
)
}
\arguments{
\item{url}{URL of the REDCap API}

\item{token}{Project API token}

\item{content}{API endpoint. The options are 'arm', 'dag', 'event', 'exportFieldNames',
'file', 'formEventMapping', 'generateNextRecordName', 'instrument', 'log',
'metadata', 'participantList', 'pdf', 'project', 'project_settings', 'project_xml',
'record', 'repeatingFormsEvents', 'report', 'surveyLink', 'surveyReturnCode',
'surveyQueueLink', 'user', 'userDagMapping', 'userRole', 'userRoleMapping', and 'version'}

\item{action}{Action to perform when calling the endpoint. Either 'import',
'export', 'delete', 'rename', or 'switch'}

\item{return_as}{Determines how the server response will be returned from this
function. This is mostly useful for returning the raw response when needed.
Options are 'raw', 'text', and 'dataframe'. 'raw' returns raw byte data, 'text'
converts it to character, and 'dataframe' returns a data.frame.}

\item{...}{Additional arguments to be passed to the API}

\item{arms}{Vector of arm numbers}

\item{fields}{Vector of field names}

\item{forms}{Vector of form names}

\item{events}{Vector of event names}

\item{records}{Vector of record IDs}

\item{dags}{Vector of data access groups}

\item{beginTime}{Filter for log exports. Format is 'YYYY-MM-DD HH:MM'}

\item{csvDelimiter}{Operator to delimit csv exports with. For exporting records
and reports. Options are ',', 'tab', ';', '|', and '^'}

\item{dag}{Specifies a data access group to switch to}

\item{data}{Data to import}

\item{dateRangeBegin}{Optional date filter for records exports. Use format 'YYYY-MM-DD HH:MM:SS'}

\item{dateRangeEnd}{Optional date filter for records exports. Use format 'YYYY-MM-DD HH:MM:SS'}

\item{endTime}{Filter for log exports. Format is 'YYYY-MM-DD HH:MM'}

\item{event}{Event name. For file import/export}

\item{exportCheckboxLabel}{Logical. Will use the choice label or NA to fill
fields instead of Checked or Unchecked. Requires rawOrLabel to be set to
'true', otherwise does nothing.}

\item{exportDataAccessGroups}{Logical}

\item{exportSurveyFields}{Logical}

\item{file_field}{Field name for file import/export}

\item{file}{Path to file for import}

\item{filterLogic}{Optional logic filter for record exports. Use REDCap
style syntax- ie. similar to branching logic, calculations, etc.}

\item{forceAutoNumber}{Logical. For importing records}

\item{logtype}{Unknown}

\item{overWriteBehavior}{Determines whether import data will overwrite existing
data. Options are 'normal or 'overwrite'. Pay careful attention to NA values
when using this option, as they will overwrite existing values. In normal
mode, existing values cannot be replaced with another value or NA.}

\item{rawOrLabel}{For choice fields such as radio and drop-down. 'raw' will
fill the data using the choice numbers while 'label' will use the choice labels.}

\item{rawOrLabelHeaders}{Determines whether to use field names or field labels
for column names}

\item{record}{Specify record ID for file import/export or log filtering}

\item{report_id}{ID number of report for export. May be supplied as either
character or numeric.}

\item{returnContent}{Specify response type when importing records. Options are
'count', 'ids', 'auto_ids', 'raw', and 'nothing'. 'count' returns the number of
records which were updated. 'ids' returns a list of updated IDs. 'auto_ids'
is not properly supported yet and currently is the same as 'count'?
'raw' returns the response object as recieved from the server for debugging.
'nothing' returns NULL.}

\item{returnMetadataOnly}{Logical. For 'project_xml' export.}

\item{type}{For record imports/exports. Options are 'flat' and 'eav'}

\item{user}{Specify a user for log exports}

\item{format}{Specify format of imported or exported data. Options are 'csv',
'json', or 'xml'}

\item{returnFormat}{Specify format for errors. Options are 'csv', 'json', or 'xml'}

\item{encode}{Encoding format to be passed to \code{httr::POST()}. Options are
'form', 'multipart', or 'identity'}
}
\description{
This is a generic API function. It is intended to provide a more
flexible interface to the API than \code{rc_import} and \code{rc_export} while
still improving usability. It is also a barebones type function by natures
and does not have the same level of checks and other embellishments as
other package functions.
}
\author{
Marcus Lehr
}
